from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import create_order, update_order_photo, update_order_status, get_order
from keyboards import get_payment_methods, get_payment_confirmation, get_back_button, get_admin_decision
from config import EMOJI, PAYMENT_CARD, PAYMENT_YOOMONEY, PAYMENT_SBP_PHONE, PAYMENT_SBP_NAME, PAYMENT_SBP_BANK, ADMIN_ID
from handlers.catalog import PRODUCTS

router = Router()

class PaymentStates(StatesGroup):
    waiting_for_photo = State()

@router.callback_query(F.data.startswith("pay_"))
async def process_payment_method(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    payment_method = parts[1]
    product_id = "_".join(parts[2:])
    
    if product_id not in PRODUCTS:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    product = PRODUCTS[product_id]
    data = await state.get_data()
    promo_discount = data.get('promo_discount', 0)
    final_price = int(product["price"] * (1 - promo_discount / 100))
    
    order_id = await create_order(
        user_id=callback.from_user.id,
        product_id=product_id,
        product_name=product["name"],
        product_price=final_price,
        payment_method=payment_method
    )
    
    if payment_method == "card":
        payment_details = f"{EMOJI['card']} **–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞**\n`{PAYMENT_CARD}`"
    elif payment_method == "yoomoney":
        payment_details = f"{EMOJI['money']} **–ÆMoney**\n`{PAYMENT_YOOMONEY}`"
    elif payment_method == "sbp":
        payment_details = (
            f"{EMOJI['wind']} **–°–ë–ü (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)**\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: `{PAYMENT_SBP_PHONE}`\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {PAYMENT_SBP_NAME}\n"
            f"–ë–∞–Ω–∫: {PAYMENT_SBP_BANK}"
        )
    else:
        payment_details = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã"
    
    text = (
        f"{EMOJI['package']} **{product['name']}**\n"
        f"{EMOJI['money']} –°—É–º–º–∞: **{final_price}‚ÇΩ**\n\n"
        f"{payment_details}\n\n"
        f"{EMOJI['alert']} –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!"
    )
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=get_back_button())
    await state.update_data(order_id=order_id)
    await state.set_state(PaymentStates.waiting_for_photo)
    await callback.answer()

@router.message(PaymentStates.waiting_for_photo, F.photo)
async def handle_payment_photo(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if not order_id:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    photo_id = message.photo[-1].file_id
    await update_order_photo(order_id, photo_id)
    
    order = await get_order(order_id)
    
    admin_text = (
        f"{EMOJI['alert']} **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}**\n\n"
        f"{EMOJI['package']} –¢–æ–≤–∞—Ä: **{order['product_name']}**\n"
        f"{EMOJI['money']} –°—É–º–º–∞: **{order['product_price']}‚ÇΩ**\n"
        f"{EMOJI['card']} –°–ø–æ—Å–æ–±: {order['payment_method']}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.mention_html()}"
    )
    
    await bot.send_photo(
        chat_id=ADMIN_ID,
        photo=photo_id,
        caption=admin_text,
        parse_mode="HTML",
        reply_markup=get_admin_decision(order_id)
    )
    
    await message.answer(
        f"{EMOJI['check']} –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω!\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await state.clear()

@router.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment(callback: CallbackQuery, bot: Bot):
    order_id = int(callback.data.split("_")[2])
    await update_order_status(order_id, "pending_admin")
    await callback.answer("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)

@router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    await update_order_status(order_id, "cancelled")
    await callback.message.edit_text(
        f"{EMOJI['cross']} –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
        reply_markup=get_back_button()
    )
    await callback.answer()

@router.callback_query(F.data == "back_from_payment")
async def back_from_payment(callback: CallbackQuery):
    from keyboards import get_main_menu
    await callback.message.edit_text(
        f"{EMOJI['fire']} **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LUNO SHOP!**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        parse_mode="Markdown",
        reply_markup=get_main_menu()
    )
    await callback.answer()

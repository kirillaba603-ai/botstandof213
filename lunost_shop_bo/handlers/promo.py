from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import get_promocode, use_promocode
from handlers.catalog import PromoStates, PRODUCTS
from keyboards import get_payment_methods
from config import EMOJI

router = Router()

@router.message(PromoStates.waiting_for_promo)
async def process_promo_code(message: Message, state: FSMContext):
    promo_code = message.text.strip().upper()
    data = await state.get_data()
    
    product_id = data.get('product_id')
    base_price = data.get('base_price')
    
    if not product_id or not base_price:
        await message.answer(f"{EMOJI['cross']} –û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    promo = await get_promocode(promo_code)
    
    if not promo:
        await message.answer(f"{EMOJI['cross']} **–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!**\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.", parse_mode="Markdown")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{EMOJI['berry']} –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"enter_promo_{product_id}")],
            [InlineKeyboardButton(text=f"{EMOJI['arrow']} –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data=f"skip_promo_{product_id}")]
        ])
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
        await state.set_state(None)
        return
    
    if promo['max_uses'] > 0 and promo['current_uses'] >= promo['max_uses']:
        await message.answer(f"{EMOJI['cross']} **–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!**", parse_mode="Markdown")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{EMOJI['arrow']} –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data=f"skip_promo_{product_id}")]
        ])
        await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard)
        await state.set_state(None)
        return
    
    discount = promo['discount']
    final_price = int(base_price * (100 - discount) / 100)
    
    await state.update_data(final_price=final_price, promo_code=promo_code, discount=discount)
    await use_promocode(promo_code)
    
    product = PRODUCTS[product_id]
    
    text = f"{EMOJI['check']} **–ü–†–û–ú–û–ö–û–î –ü–†–ò–ú–ï–ù–Å–ù!**\n\n"
    text += f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: `{promo_code}`\n"
    text += f"üìù {promo['description']}\n\n"
    text += f"üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ~~{base_price}‚ÇΩ~~\n"
    text += f"üî• –°–∫–∏–¥–∫–∞: **-{discount}%**\n"
    text += f"‚ú® –ò—Ç–æ–≥–æ: **{final_price}‚ÇΩ**\n\n"
    text += f"_{EMOJI['lightning']} –≠–∫–æ–Ω–æ–º–∏—è {base_price - final_price}‚ÇΩ!_"
    
    await message.answer(text, parse_mode="Markdown")
    await message.answer(f"{EMOJI['arrow']} **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:**", reply_markup=get_payment_methods(product_id), parse_mode="Markdown")
    
    await state.set_state(None)

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import aiosqlite

from database import update_order_status, get_order, add_promocode, delete_promocode, get_all_promocodes, toggle_promocode
from config import EMOJI, ADMIN_ID

router = Router()

WEBAPP_URL = "https://main-five-sage.vercel.app"

class BroadcastStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_confirmation = State()

class PromoAdminStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_discount = State()
    waiting_for_description = State()
    waiting_for_max_uses = State()

def get_webapp_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"{EMOJI['fire']} –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))]
        ],
        resize_keyboard=True
    )

# ============ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–û–í ============

@router.callback_query(F.data.startswith("admin_accept_"))
async def admin_accept_order(callback: CallbackQuery, bot: Bot):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[2])
    order = await get_order(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    await update_order_status(order_id, "completed")
    
    user_text = (
        f"{EMOJI['check']} **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**\n\n"
        f"{EMOJI['package']} **–¢–æ–≤–∞—Ä:** {order['product_name']}\n"
        f"{EMOJI['money']} **–°—É–º–º–∞:** {order['product_price']}‚ÇΩ\n\n"
        f"{EMOJI['lightning']} –í–∞—à —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ **5 –º–∏–Ω—É—Ç**!\n"
        f"{EMOJI['heart']} –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ **LUNO SHOP**!"
    )
    
    await bot.send_message(order["user_id"], user_text, parse_mode="Markdown")
    
    try:
        await callback.message.edit_caption(
            caption=f"{callback.message.caption}\n\n‚úÖ **–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**",
            parse_mode="Markdown"
        )
    except:
        pass
    
    await callback.answer(f"{EMOJI['check']} –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!")

@router.callback_query(F.data.startswith("admin_reject_"))
async def admin_reject_order(callback: CallbackQuery, bot: Bot):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[2])
    order = await get_order(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    await update_order_status(order_id, "rejected")
    
    user_text = (
        f"{EMOJI['cross']} **–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
        f"{EMOJI['package']} **–¢–æ–≤–∞—Ä:** {order['product_name']}\n"
        f"{EMOJI['money']} **–°—É–º–º–∞:** {order['product_price']}‚ÇΩ\n\n"
        f"{EMOJI['alert']} **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
        "‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞\n"
        "‚Ä¢ –ù–µ—á–∏—Ç–∞–µ–º—ã–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫\n"
        "‚Ä¢ –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
        f"{EMOJI['lightning']} –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞."
    )
    
    await bot.send_message(order["user_id"], user_text, parse_mode="Markdown", reply_markup=get_webapp_keyboard())
    
    try:
        await callback.message.edit_caption(
            caption=f"{callback.message.caption}\n\n‚ùå **–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**",
            parse_mode="Markdown"
        )
    except:
        pass
    
    await callback.answer(f"{EMOJI['cross']} –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω!")

@router.callback_query(F.data.startswith("admin_refund_"))
async def admin_refund_order(callback: CallbackQuery, bot: Bot):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[2])
    order = await get_order(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    await update_order_status(order_id, "refunded")
    
    user_text = (
        f"‚ùó **–ò—Å–∫—Ä–µ–Ω–Ω–µ –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞**\n\n"
        f"{EMOJI['alert']} –ü–æ –∑–∞–∫–∞–∑—É **#{order_id}** ({order['product_name']}) –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö.\n\n"
        f"{EMOJI['money']} **–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω**\n"
        f"{EMOJI['clock']} –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: –¥–æ 3-—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n"
        f"{EMOJI['alert']} –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"{EMOJI['berry']} **–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏** –º—ã –¥–∞—Ä–∏–º –≤–∞–º –ø—Ä–æ–º–æ–∫–æ–¥:\n"
        f"**`REF20`** ‚Äî —Å–∫–∏–¥–∫–∞ **20%** –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑!\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"{EMOJI['fire']} –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ **–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º** –∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º, –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω.\n\n"
        f"{EMOJI['heart']} –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
    )
    
    await bot.send_message(order["user_id"], user_text, parse_mode="Markdown", reply_markup=get_webapp_keyboard())
    
    try:
        await callback.message.edit_caption(
            caption=f"{callback.message.caption}\n\nüí∏ **–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω**",
            parse_mode="Markdown"
        )
    except:
        pass
    
    await callback.answer("üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")

# ============ –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ============

@router.message(Command("stats"))
async def show_stats(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    async with aiosqlite.connect('shop_bot.db') as db:
        async with db.execute('SELECT COUNT(*) FROM users') as cursor:
            total_users = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT COUNT(*) FROM orders') as cursor:
            total_orders = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT COUNT(*) FROM orders WHERE status = "completed"') as cursor:
            completed = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT COUNT(*) FROM orders WHERE status = "pending"') as cursor:
            pending = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT SUM(product_price) FROM orders WHERE status = "completed"') as cursor:
            revenue = (await cursor.fetchone())[0] or 0
    
    text = (
        f"{EMOJI['diamond']} **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: **{total_orders}**\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: **{completed}**\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç: **{pending}**\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: **{revenue}‚ÇΩ**"
    )
    
    await message.answer(text, parse_mode="Markdown")

@router.message(Command("broadcast"))
async def start_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    await state.set_state(BroadcastStates.waiting_for_message)
    await message.answer(
        f"{EMOJI['fire']} **–†–ï–ñ–ò–ú –†–ê–°–°–´–õ–ö–ò**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n\n"
        "/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="Markdown"
    )

@router.message(Command("cancel"))
async def cancel_action(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    await state.clear()
    await message.answer(f"{EMOJI['cross']} –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.message(BroadcastStates.waiting_for_message)
async def receive_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    broadcast_data = {
        'text': message.text or message.caption,
        'photo': message.photo[-1].file_id if message.photo else None,
        'video': message.video.file_id if message.video else None,
    }
    
    await state.update_data(broadcast_data=broadcast_data)
    await state.set_state(BroadcastStates.waiting_for_confirmation)
    
    async with aiosqlite.connect('shop_bot.db') as db:
        async with db.execute('SELECT COUNT(*) FROM users') as cursor:
            user_count = (await cursor.fetchone())[0]
    
    text = (
        f"{EMOJI['alert']} **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï**\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: **{user_count}**\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å?\n"
        "**–î–ê** - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å\n"
        "**–ù–ï–¢** - –æ—Ç–º–µ–Ω–∏—Ç—å"
    )
    
    await message.answer(text, parse_mode="Markdown")

@router.message(BroadcastStates.waiting_for_confirmation)
async def confirm_broadcast(message: Message, state: FSMContext, bot: Bot):
    if message.from_user.id != ADMIN_ID:
        return
    
    if message.text and message.text.upper() == "–î–ê":
        data = await state.get_data()
        broadcast_data = data.get('broadcast_data')
        
        async with aiosqlite.connect('shop_bot.db') as db:
            async with db.execute('SELECT user_id FROM users') as cursor:
                users = await cursor.fetchall()
        
        success = 0
        failed = 0
        status_msg = await message.answer(f"{EMOJI['lightning']} –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
        
        for user_id, in users:
            try:
                if broadcast_data['photo']:
                    await bot.send_photo(
                        user_id,
                        photo=broadcast_data['photo'],
                        caption=broadcast_data['text'],
                        parse_mode="Markdown"
                    )
                elif broadcast_data['video']:
                    await bot.send_video(
                        user_id,
                        video=broadcast_data['video'],
                        caption=broadcast_data['text'],
                        parse_mode="Markdown"
                    )
                else:
                    await bot.send_message(
                        user_id,
                        text=broadcast_data['text'],
                        parse_mode="Markdown"
                    )
                success += 1
            except:
                failed += 1
        
        await status_msg.edit_text(
            f"{EMOJI['check']} **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: **{success}**\n"
            f"‚ùå –û—à–∏–±–æ–∫: **{failed}**",
            parse_mode="Markdown"
        )
        await state.clear()
    
    elif message.text and message.text.upper() == "–ù–ï–¢":
        await message.answer(f"{EMOJI['cross']} –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()
    
    else:
        await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ **–î–ê** –∏–ª–∏ **–ù–ï–¢**", parse_mode="Markdown")

@router.message(Command("refund"))
async def manual_refund(message: Message, bot: Bot):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ ID –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        ids_text = message.text.replace("/refund", "").strip()
        
        if not ids_text:
            await message.answer(
                f"{EMOJI['alert']} **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "`/refund ID1, ID2, ID3...`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/refund 5` ‚Äî –æ–¥–∏–Ω –∑–∞–∫–∞–∑\n"
                "‚Ä¢ `/refund 5, 7, 12` ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤",
                parse_mode="Markdown"
            )
            return
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        order_ids = [int(id.strip()) for id in ids_text.split(",")]
        
        success_count = 0
        failed_count = 0
        results = []
        
        status_msg = await message.answer(
            f"{EMOJI['lightning']} –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤...\n"
            f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(order_ids)}",
            parse_mode="Markdown"
        )
        
        for order_id in order_ids:
            try:
                order = await get_order(order_id)
                
                if not order:
                    results.append(f"‚ùå #{order_id} ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    failed_count += 1
                    continue
                
                await update_order_status(order_id, "refunded")
                
                user_text = (
                    f"‚ùó **–ò—Å–∫—Ä–µ–Ω–Ω–µ –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞**\n\n"
                    f"{EMOJI['alert']} –ü–æ –∑–∞–∫–∞–∑—É **#{order_id}** ({order['product_name']}) –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö.\n\n"
                    f"{EMOJI['money']} **–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω**\n"
                    f"{EMOJI['clock']} –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: –¥–æ 3-—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n"
                    f"{EMOJI['alert']} –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞\n\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"{EMOJI['berry']} **–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏** –º—ã –¥–∞—Ä–∏–º –≤–∞–º –ø—Ä–æ–º–æ–∫–æ–¥:\n"
                    f"**`REF20`** ‚Äî —Å–∫–∏–¥–∫–∞ **20%** –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑!\n\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"{EMOJI['fire']} –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ **–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º** –∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º, –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω.\n\n"
                    f"{EMOJI['heart']} –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
                )
                
                await bot.send_message(
                    order["user_id"], 
                    user_text, 
                    parse_mode="Markdown", 
                    reply_markup=get_webapp_keyboard()
                )
                
                results.append(f"‚úÖ #{order_id} ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω")
                success_count += 1
                
            except Exception as e:
                results.append(f"‚ùå #{order_id} ‚Äî –æ—à–∏–±–∫–∞: {str(e)}")
                failed_count += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
        report = (
            f"{EMOJI['check']} **–û–¢–ß–Å–¢ –û –í–û–ó–í–†–ê–¢–ê–•**\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: **{success_count}**\n"
            f"‚ùå –û—à–∏–±–æ–∫: **{failed_count}**\n\n"
            f"**–î–µ—Ç–∞–ª–∏:**\n"
        )
        
        for result in results:
            report += f"{result}\n"
        
        await status_msg.edit_text(report, parse_mode="Markdown")
    
    except ValueError:
        await message.answer(
            f"{EMOJI['cross']} **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!**\n\n"
            "ID –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/refund 5, 7, 12`",
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer(f"{EMOJI['cross']} –û—à–∏–±–∫–∞: {str(e)}")

# ============ –ü–†–û–ú–û–ö–û–î–´ ============

@router.message(Command("addpromo"))
async def start_add_promo(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    await state.set_state(PromoAdminStates.waiting_for_code)
    await message.answer(
        f"{EMOJI['berry']} **–°–û–ó–î–ê–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê**\n\n"
        "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞\n"
        "_(–ù–∞–ø—Ä–∏–º–µ—Ä: FREE10)_",
        parse_mode="Markdown"
    )

@router.message(PromoAdminStates.waiting_for_code)
async def get_promo_code(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    code = message.text.strip().upper()
    await state.update_data(promo_code=code)
    await state.set_state(PromoAdminStates.waiting_for_discount)
    await message.answer(
        "–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ %\n"
        "_(–ù–∞–ø—Ä–∏–º–µ—Ä: 10)_",
        parse_mode="Markdown"
    )

@router.message(PromoAdminStates.waiting_for_discount)
async def get_promo_discount(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        discount = int(message.text.strip())
        await state.update_data(discount=discount)
        await state.set_state(PromoAdminStates.waiting_for_description)
        await message.answer("–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ", parse_mode="Markdown")
    except:
        await message.answer(f"{EMOJI['cross']} –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@router.message(PromoAdminStates.waiting_for_description)
async def get_promo_desc(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    await state.update_data(description=message.text.strip())
    await state.set_state(PromoAdminStates.waiting_for_max_uses)
    await message.answer("–®–∞–≥ 4/4: –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (0 = –±–µ–∑–ª–∏–º–∏—Ç)", parse_mode="Markdown")

@router.message(PromoAdminStates.waiting_for_max_uses)
async def create_promo(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        max_uses = int(message.text.strip())
        data = await state.get_data()
        
        success = await add_promocode(
            data['promo_code'],
            data['discount'],
            data['description'],
            max_uses
        )
        
        if success:
            await message.answer(
                f"{EMOJI['check']} **–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"–ö–æ–¥: `{data['promo_code']}`\n"
                f"–°–∫–∏–¥–∫–∞: {data['discount']}%",
                parse_mode="Markdown"
            )
        else:
            await message.answer(f"{EMOJI['cross']} –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        
        await state.clear()
    except:
        await message.answer(f"{EMOJI['cross']} –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@router.message(Command("promos"))
async def list_promos(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    promos = await get_all_promocodes()
    
    if not promos:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n/addpromo –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
        return
    
    text = f"{EMOJI['berry']} **–ü–†–û–ú–û–ö–û–î–´**\n\n"
    for p in promos:
        text += f"`{p['code']}` - {p['discount']}% ({'üü¢' if p['is_active'] else 'üî¥'})\n"
    
    await message.answer(text, parse_mode="Markdown")

@router.message(Command("delpromo"))
async def delete_promo(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        code = message.text.split()[1].upper()
        await delete_promocode(code)
        await message.answer(f"{EMOJI['check']} –ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª—ë–Ω!")
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delpromo –ö–û–î")

@router.message(Command("togglepromo"))
async def toggle_promo(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        code = message.text.split()[1].upper()
        await toggle_promocode(code)
        await message.answer(f"{EMOJI['check']} –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω!")
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /togglepromo –ö–û–î")
